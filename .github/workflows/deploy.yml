name: Deploy Nginx

on:
  push:
    branches:
      - dev  # Start with dev only; add main later.

jobs:
  validate:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Install Docker Compose
        run: |
          sudo curl -L "https://github.com/docker/compose/releases/latest/download/docker-compose-$(uname -s)-$(uname -m)" -o /usr/local/bin/docker-compose
          sudo chmod +x /usr/local/bin/docker-compose

      - name: Validate Docker Compose # (syntax check)
        run: docker-compose config  

      - name: Check Nginx # (.env substitution) 
        run: |
          # Simulate envsubst (add more vars if needed)
          echo "MANGOPOST_API_DOMAIN=example.com" >> .env
          echo "IP=127.0.0.1" >> .env
          envsubst '$IP $MANGOPOST_API_DOMAIN' < nginx.conf.template > temp.conf
          docker run --rm -v $(pwd)/temp.conf:/etc/nginx/nginx.conf nginx:latest nginx -t  # Tests config in container

  deploy:
    needs: validate  # 1st validate above => deploy afterwards 
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: SSH to Server
        uses: appleboy/ssh-action@v1.0.3
        with:
          host: ${{ secrets.SSH_HOST }}  # your's server IP/domain
          username: ${{ secrets.SSH_USERNAME }}  # 'deploy-user'
          port: 22 
          key: ${{ secrets.SSH_PRIVATE_KEY }}  
          script: |
            cd /home/projects/deployment
            git checkout ${{ github.ref_name }}  # Switches to pushed branch (e.g., dev)
            git pull origin ${{ github.ref_name }}
  
            docker-compose down
            docker-compose up -d --pull always  # Pulls latest images
            sleep 10  # Wait for startup
            if ! docker-compose ps | grep -q "healthy"; then
              echo "Healthcheck failed!" && exit 1
            fi  # Post-deploy check

      - name: Report failed deployment
        if: failure()
        uses: actions/github-script@v7
        with:
          script: |
            github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: 'Deployment failed! Check logs.'
            })  # Or integrate Slack/email